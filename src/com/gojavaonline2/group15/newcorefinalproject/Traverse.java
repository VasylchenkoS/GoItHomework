package com.gojavaonline2.group15.newcorefinalproject;


//  Обход дерева, это процесс обхождения всех узлов и их обрабатывании. Существует три типа обхода дерева:
//  Inorder – посещение левого поддерева, корня и правого поддерева.
//  Preorder – посещение корня, левого поддерева и правого поддерева.
//  Postorder – посещение левого поддерева, правого поддерева и корня.
//  В данном проекте используется рекурсивный подход обхода дерева.
class Traverse {

//  Инфиксный обход используется тогда, когда нам надо обойти дерево в порядке,
//  соответствующем значениям узлов.
//  Мы обходим их от самого маленького до самого большого. То есть от левых поддеревьев к правым через корень.
    public static void inorderTraverse(Node current) {
        if (current == null)
            return;
        inorderTraverse(current.getLeft());
        System.out.print(current.getValue() + " ");
        inorderTraverse(current.getRight());
    }
//  При префиксном обходе алгоритм получает значение текущего узла перед тем,
//  как перейти сначала в левое поддерево, а затем в правое.
//  Начиная от корня, сначала мы получим значение 4.
//  Затем таким же образом обходятся левый ребенок и его дети, затем правый ребенок и все его дети.
//  Префиксный обход обычно применяется для копирования дерева с сохранением его структуры.
    public static void preorderTraverse(Node current) {
        if (current == null)
            return;
        System.out.print(current.getValue() + " ");
        preorderTraverse(current.getLeft());
        preorderTraverse(current.getRight());
    }
//  При постфиксном обходе мы посещаем левое поддерево, правое поддерево,
//  а потом, после обхода всех детей, переходим к самому узлу.
//  Постфиксный обход часто используется для полного удаления дерева,
//  так как в некоторых языках программирования необходимо убирать из памяти все узлы явно,
//  или для удаления поддерева. Поскольку корень в данном случае обрабатывается последним,
//  мы, таким образом, уменьшаем работу, необходимую для удаления узлов.
    public static void postorderTraverse(Node current) {
        if (current == null)
            return;
        postorderTraverse(current.getLeft());
        postorderTraverse(current.getRight());
        System.out.print(current.getValue() + " ");
    }
}
